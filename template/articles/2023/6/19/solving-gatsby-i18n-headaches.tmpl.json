{"layout":"article.njk","title":"Solving Gatsby i18n Headaches","date":"2023-06-19T03:00:00.000Z","formattedDate":"2023-6-19","source_link":"https://smashingmagazine.com/2023/06/gatsby-headaches-i18n-part-2/","tags":["gatsby"],"topics":[{"name":"Gatsby","slug":"gatsby"}],"content":"<p>Gatsby is a popular framework for building static websites and blogs. In Part 2 of this series, Juan Diego Rodr√≠guez (also known as Monknow) discusses how to solve i18n headaches in Gatsby.</p>\n<p>While Gatsby plugins can be useful for adding i18n support, they can also introduce compatibility issues when used together. To solve this problem, Juan suggests finding plugins that provide better support or editing the plugin&#39;s code (with caution).</p>\n<p>Juan also recommends using a library called react-i18next for handling translation in Gatsby. React-i18next provides a simple and flexible way to handle translations in React applications.</p>\n<p>Here&#39;s an example of how to use react-i18next in Gatsby:</p>\n<pre><code>import React from &quot;react&quot;\nimport { useTranslation } from &quot;react-i18next&quot;\n\nconst MyComponent = () =&gt; {\n  const { t } = useTranslation()\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{t(&quot;hello&quot;)}&lt;/h1&gt;\n      &lt;p&gt;{t(&quot;description&quot;)}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre>\n<p>By using react-i18next, developers can avoid the headaches of using multiple plugins and have more control over their i18n implementation.</p>\n<p>Overall, Gatsby developers should be aware of the potential compatibility issues that can arise when using plugins and consider alternative solutions like react-i18next.</p>\n"}