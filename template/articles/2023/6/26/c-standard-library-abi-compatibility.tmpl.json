{"layout":"article.njk","title":"C++ Standard Library ABI Compatibility","date":"2023-06-26T03:00:00.000Z","formattedDate":"2023-6-26","source_link":"https://old.reddit.com/r/cpp/comments/14j30d9/c_standard_library_abi_compatibility/","tags":["c"],"topics":[{"name":"C++","slug":"c"}],"content":"<p>The author of this article talks about the importance of ABI (Application Binary Interface) compatibility in C++ standard library. ABI is the interface between two binary program modules, such as a library and its client. ABI compatibility ensures that a library can be used by multiple clients without the need to recompile the library or the clients.</p>\n<p>The author argues that ABI compatibility should be a priority for C++ standard library developers, as it can greatly benefit the C++ community. However, achieving ABI compatibility is not an easy task, as it requires careful design and implementation decisions.</p>\n<p>The article provides an overview of the current state of ABI compatibility in C++ standard library, highlighting some of the challenges and limitations. It also suggests some possible solutions and improvements, such as better documentation and tooling support.</p>\n<p>For developers who want to keep up with the latest news in C++ standard library, understanding ABI compatibility is crucial. It can help them avoid potential compatibility issues and ensure that their code can be easily reused by others.</p>\n<p>Here&#39;s an example of how to check ABI compatibility using the <code>abi-dumper</code> tool:</p>\n<pre><code class=\"language-bash\">abi-dumper /path/to/libstdc++.so.6 -lver=6 -o /tmp/libstdc++.so.6.abi\nabi-compliance-checker -l libstdc++.so.6 -dump /tmp/libstdc++.so.6.abi -r 6.0 -s /usr/include/c++/6.0 -l GCC -c /path/to/compat_report.html\n</code></pre>\n<p>Overall, this article serves as a reminder of the importance of ABI compatibility in C++ standard library, and encourages developers to pay attention to this aspect when designing and implementing their libraries.</p>\n"}