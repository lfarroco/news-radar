{"layout":"article.njk","title":"Finite State Machine with std::variant, C++17 and C++20","date":"2023-06-26T03:00:00.000Z","formattedDate":"2023-6-26","source_link":"https://old.reddit.com/r/cpp/comments/14jbx4j/finite_state_machine_with_stdvariant_c17_and_c20/","tags":["c"],"topics":[{"name":"C++","slug":"c"}],"content":"<p>The article shows how to implement a Finite State Machine (FSM) using std::variant in C++17 and C++20. The author explains that FSMs are useful for modeling complex systems with multiple states and transitions between them. </p>\n<p>The article starts with an introduction to std::variant, a type-safe union that can hold values of different types. The author then shows how to define the states and events of the FSM using std::variant. They also explain how to define the transitions between states using functions that take the current state and event as inputs and return the next state.</p>\n<p>The article includes code snippets that demonstrate how to implement a simple FSM for a traffic light system. The code shows how to define the states as variants and the transitions as functions. The author also explains how to use std::visit to handle the different states and events.</p>\n<p>The article then goes on to discuss the improvements to std::variant in C++20, including the ability to use non-default constructors and constexpr support. The author shows how these improvements can be used to simplify the implementation of the FSM.</p>\n<p>Overall, the article provides a clear and concise introduction to implementing FSMs using std::variant in C++17 and C++20. The code snippets and explanations are useful for developers who want to learn how to model complex systems using FSMs.</p>\n"}