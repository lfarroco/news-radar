{"layout":"article.njk","title":"Type Narrowing Guards for Object Properties in Async Code","date":"2023-06-26T03:00:00.000Z","formattedDate":"2023-6-26","source_link":"https://old.reddit.com/r/typescript/comments/14jjhyj/type_narrowing_guards_for_object_properties_in/","tags":["typescript","javascript"],"topics":[{"name":"TypeScript","slug":"typescript"},{"name":"JavaScript","slug":"javascript"}],"content":"<p>In TypeScript, narrowing the type of an object property in async code can lead to inaccurate type inference. This can cause issues when the property&#39;s value changes before the code is executed. However, there is a solution to this problem: type narrowing guards.</p>\n<p>Type narrowing guards ensure that the type of an object property remains accurate even in async code. By using an <code>if</code> statement to check the property&#39;s value before using it, TypeScript can narrow the type of the property and prevent any type errors.</p>\n<p>Here&#39;s an example of how type narrowing guards can be used:</p>\n<pre><code>// Some object with a potentially null property\nconst obj = { foo: Math.random() &lt; 0.5 ? &quot;bar&quot; : null };\n\nfunction doSomethingWith(val: string) {\n  console.log(&quot;Value which is a string:&quot;, val);\n}\n\nasync function main() {\n  if (!obj.foo) {\n    throw new Error(&quot;obj.foo is not defined, cannot continue&quot;);\n  }\n\n  // Now instead of the timeout, we perform some async operation\n  await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n\n  // The type of obj.foo is still accurate because of the type narrowing guard\n  doSomethingWith(obj.foo);\n}\n</code></pre>\n<p>By using <code>async/await</code> instead of a timeout, TypeScript can accurately infer the type of <code>obj.foo</code> even in async code. This ensures that developers can write safe and accurate code without worrying about type errors.</p>\n<p>Type narrowing guards are a powerful tool for developers working with TypeScript. By using them, developers can ensure that their code is accurate and safe even in async code.</p>\n"}