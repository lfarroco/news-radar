{"layout":"article.njk","title":"Best practices for logging with DRF generic views in Django","date":"2023-06-23T03:00:00.000Z","formattedDate":"2023-6-23","source_link":"https://old.reddit.com/r/django/comments/14gnc1u/where_do_you_place_your_logs_when_using_generic/","tags":["django"],"topics":[{"name":"Django","slug":"django"}],"content":"<p>When using Django Rest Framework&#39;s generic views, such as RetrieveAPIView, ListAPIView, and CreateAPIView, it&#39;s important to have a clear and consistent approach to logging. A common question is where to place the main logline. </p>\n<p>According to the DRF documentation, the recommended approach is to override the <code>initial()</code> method of the view and set up the logger there. This method is called before any other method, making it an ideal place to set up logging for the view. </p>\n<p>Here&#39;s an example of how to set up logging in the <code>initial()</code> method:</p>\n<pre><code class=\"language-python\">import logging\n\nclass MyView(ListAPIView):\n    logger = logging.getLogger(__name__)\n\n    def initial(self, request, *args, **kwargs):\n        self.logger.info(&#39;MyView called&#39;)\n        super().initial(request, *args, **kwargs)\n</code></pre>\n<p>This code sets up a logger for the view and logs a message when the view is called. The <code>super().initial()</code> call ensures that the view&#39;s normal initialization process is still executed.</p>\n<p>Another option is to override the <code>dispatch()</code> method, which is called for every request. However, this can result in more log messages than necessary, as it will log for every HTTP method (GET, POST, etc.) that the view supports.</p>\n<p>In summary, the recommended approach for logging with DRF generic views is to override the <code>initial()</code> method. This ensures that the logger is set up before any other methods are called, and provides a clear and consistent approach to logging across views.</p>\n"}