{"layout":"article.njk","title":"Fetching Multiple To-Many Relationships with jOOQ MULTISET","date":"2023-06-21T03:00:00.000Z","formattedDate":"2023-6-21","source_link":"https://vladmihalcea.com/fetch-multiple-to-many-jooq-multiset/","tags":["jooq"],"topics":[{"name":"jOOQ","slug":"jooq"}],"content":"<p>jOOQ is a popular Java Object-oriented Querying library that allows developers to write typesafe SQL queries. In this article, we will explore how to fetch multiple to-many relationships with jOOQ MULTISET.</p>\n<p>The approach taken by jOOQ is truly revolutionary since it offers a solution that allows you to fetch multiple to-many relationships using a single type-safe query.</p>\n<p>Domain Model</p>\n<p>Let’s assume that we have the following database tables:</p>\n<pre><code>CREATE TABLE post (\n    id BIGINT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE tag (\n    id BIGINT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE post_tag (\n    post_id BIGINT NOT NULL,\n    tag_id BIGINT NOT NULL,\n    PRIMARY KEY (post_id, tag_id),\n    FOREIGN KEY (post_id) REFERENCES post(id),\n    FOREIGN KEY (tag_id) REFERENCES tag(id)\n);\n</code></pre>\n<p>We have a many-to-many relationship between <code>post</code> and <code>tag</code> entities, which is represented by the <code>post_tag</code> join table.</p>\n<p>Fetching Multiple To-Many Relationships</p>\n<p>With jOOQ, we can use the <code>MULTISET</code> function to fetch multiple to-many relationships in a single query. Here’s an example:</p>\n<pre><code>List&lt;Post&gt; posts = dsl.selectFrom(POST)\n    .leftJoin(POST_TAG).on(POST.ID.eq(POST_TAG.POST_ID))\n    .leftJoin(TAG).on(POST_TAG.TAG_ID.eq(TAG.ID))\n    .groupBy(POST.ID)\n    .orderBy(POST.ID)\n    .fetchInto(Post.class, \n        POST.ID, POST.TITLE, \n        multiset(TAG.ID, TAG.NAME).convertFrom(r -&gt; \n            new Tag(r.get(TAG.ID), r.get(TAG.NAME))\n        )\n    );\n</code></pre>\n<p>In the above query, we’re fetching all posts and their associated tags using the <code>MULTISET</code> function. The <code>multiset</code> function takes two arguments: the columns to fetch and a lambda function to convert the fetched rows into the desired object.</p>\n<p>In this case, we’re converting the fetched rows into a <code>Tag</code> object using the <code>r -&gt; new Tag(r.get(TAG.ID), r.get(TAG.NAME))</code> lambda function.</p>\n<p>Conclusion</p>\n<p>In this article, we’ve seen how to fetch multiple to-many relationships with jOOQ MULTISET. This approach allows us to avoid Cartesian Products and write type-safe queries that are easy to maintain.</p>\n<p>jOOQ is a powerful library that can help developers write complex SQL queries with ease. If you’re interested in learning more about jOOQ, be sure to check out their official documentation.</p>\n"}