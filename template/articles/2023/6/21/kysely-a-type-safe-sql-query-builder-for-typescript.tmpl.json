{"layout":"article.njk","title":"Kysely: A Type-Safe SQL Query Builder for TypeScript","date":"2023-06-21T03:00:00.000Z","formattedDate":"2023-6-21","source_link":"https://kysely.dev/","tags":["typescript","sql"],"topics":[{"name":"TypeScript","slug":"typescript"},{"name":"SQL","slug":"sql"}],"content":"<p>Kysely is a type-safe SQL query builder for TypeScript, designed to eliminate entire classes of errors and provide developers with a peaceful night&#39;s sleep. By using Kysely, developers can write type-safe SQL queries, which not only reduces the amount of errors but also makes it easier to reason about performance.</p>\n<p>Kysely is a light abstraction layer over SQL, which makes it easy to learn and use. It also exposes the database schema to the TypeScript compiler, providing developers with autocompletion on table names, column names, aliases, and more. With multi-dialect support, Kysely can be used with PostgreSQL, MySQL, or SQLite, and there is a growing ecosystem of 3rd party dialects, including PlanetScale, D3, SurrealDB, and more.</p>\n<p>Kysely runs on every environment, including node.js, the browser, serverless and edge environments, and even on Deno. It also comes with a plugin system that lets developers extend the core with their own functionality.</p>\n<p>Developers are loving Kysely for its simplicity and power. According to Dax Raad, a member of the SST_dev core team, &quot;Kysely is the best written TS codebase I&#39;ve ever seen.&quot; Harminder Virk, the creator of AdonisJS, also praised Kysely, saying &quot;Kysely is great. Keeping an eye on it to see how it evolves in coming months.&quot;</p>\n<p>Here&#39;s an example of how to use Kysely to build a type-safe SQL query:</p>\n<pre><code class=\"language-typescript\">import { createQuery } from &#39;kysely&#39;;\n\nconst query = createQuery()\n  .select(&#39;id&#39;, &#39;name&#39;, &#39;email&#39;)\n  .from(&#39;users&#39;)\n  .where(&#39;id&#39;, &#39;=&#39;, 1)\n  .orWhere(&#39;name&#39;, &#39;like&#39;, &#39;%John%&#39;)\n  .limit(10)\n  .offset(20)\n  .build();\n\nconsole.log(query);\n// SELECT &quot;id&quot;, &quot;name&quot;, &quot;email&quot; FROM &quot;users&quot; WHERE &quot;id&quot; = $1 OR &quot;name&quot; LIKE $2 LIMIT 10 OFFSET 20\n</code></pre>\n<p>In the example above, the <code>createQuery</code> function is used to create a new query object. The <code>select</code> method is used to specify the columns to select, the <code>from</code> method is used to specify the table to select from, and the <code>where</code> and <code>orWhere</code> methods are used to specify the conditions of the query. Finally, the <code>limit</code> and <code>offset</code> methods are used to specify the pagination of the query.</p>\n<p>In conclusion, Kysely is a powerful tool for developers who want to write type-safe SQL queries in TypeScript. With its simplicity, multi-dialect support, and plugin system, Kysely is a great choice for any project.</p>\n"}