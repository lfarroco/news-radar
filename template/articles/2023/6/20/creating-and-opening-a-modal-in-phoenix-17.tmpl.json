{"layout":"article.njk","title":"Creating and Opening a Modal in Phoenix 1.7","date":"2023-06-20T03:00:00.000Z","formattedDate":"2023-6-20","source_link":"https://blog.appsignal.com/2023/06/20/create-and-open-a-modal-in-phoenix-1-7.html","tags":["phoenix"],"topics":[{"name":"Phoenix","slug":"phoenix"}],"content":"<p>Phoenix 1.7, released this year, comes packed with exciting features such as verified routes and built-in Tailwind components. While these components provide a great starting point, they may not always fit specific design needs. In this article, we will learn how to create and open a modal in a Phoenix app.</p>\n<p>Setting up the UI\nTo demonstrate the process, we will create a UI for a pet shop called Petacular. To begin, we need to bootstrap the app. If you don&#39;t have the latest Phoenix installer, install it with the following command:</p>\n<pre><code>mix archive.install hex phx_new\n</code></pre>\n<p>Then, create the project with:</p>\n<pre><code>mix phx.new petacular\n</code></pre>\n<p>This will generate the core components we will use in our examples.</p>\n<p>Creating a Modal\nTo create a modal, we will use the <code>phx-modal</code> component provided by Phoenix. This component is not included in the default installation, so we need to add it to our project by including the <code>phoenix_html</code> dependency in our <code>mix.exs</code> file:</p>\n<pre><code class=\"language-elixir\">defp deps do\n  [\n    {:phoenix_html, &quot;~&gt; 3.0&quot;},\n    # other dependencies\n  ]\nend\n</code></pre>\n<p>After adding the dependency, we need to install it by running <code>mix deps.get</code>.</p>\n<p>Next, we need to add the <code>phx-modal</code> component to our page. We can do this by adding the following code to our template file:</p>\n<pre><code class=\"language-html\">&lt;%= render_modal @my_modal %&gt;\n</code></pre>\n<p>Here, <code>@my_modal</code> is a variable that we will use to control the modal.</p>\n<p>To open the modal, we need to add a button or link that triggers the <code>phx-modal</code> component. We can do this by adding the following code to our template file:</p>\n<pre><code class=\"language-html\">&lt;button phx-click=&quot;phx-modal-show&quot; phx-target=&quot;my_modal&quot;&gt;Open Modal&lt;/button&gt;\n</code></pre>\n<p>Here, <code>phx-click</code> and <code>phx-target</code> are attributes that tell Phoenix to show the <code>my_modal</code> modal when the button is clicked.</p>\n<p>Finally, we need to define the <code>my_modal</code> variable in our template file. We can do this by adding the following code:</p>\n<pre><code class=\"language-html\">&lt;%= modal &quot;my_modal&quot;, fn(modal) -&gt; %&gt;\n  &lt;div class=&quot;modal-header&quot;&gt;\n    &lt;h4 class=&quot;modal-title&quot;&gt;Modal Title&lt;/h4&gt;\n    &lt;button type=&quot;button&quot; class=&quot;close&quot; phx-click=&quot;phx-modal-hide&quot; aria-label=&quot;Close&quot;&gt;\n      &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;\n    &lt;/button&gt;\n  &lt;/div&gt;\n  &lt;div class=&quot;modal-body&quot;&gt;\n    Modal Content\n  &lt;/div&gt;\n&lt;% end %&gt;\n</code></pre>\n<p>Here, <code>modal</code> is a helper function provided by Phoenix that generates the modal HTML.</p>\n<p>Conclusion\nCreating and opening a modal in Phoenix 1.7 is a straightforward process that can be achieved using the <code>phx-modal</code> component. By following the steps outlined in this article, developers can add modals to their Phoenix apps and improve the user experience.</p>\n"}