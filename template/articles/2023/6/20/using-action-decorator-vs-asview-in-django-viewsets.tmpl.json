{"layout":"article.njk","title":"Using Action Decorator vs as_view in Django Viewsets","date":"2023-06-20T03:00:00.000Z","formattedDate":"2023-6-20","source_link":"https://old.reddit.com/r/django/comments/14eegf0/which_is_better_using_action_decorator_in/","tags":["django"],"topics":[{"name":"Django","slug":"django"}],"content":"</p>\n<p>\nWhen working on a project with class-based views, developers may find themselves in a situation where they need to call different functions in a view depending on the action being performed. In this case, two common approaches are using the action decorator or the as_view method. \n</p>\n<p>\nThe action decorator allows developers to define a custom function for each action in the viewset, making it easier to organize the code. On the other hand, the as_view method allows developers to call different functions in a view by specifying the action in the URL.\n</p>\n<p>\nIn the example provided, the previous developer used the as_view method to call different functions in the ReserveAPIView. While this approach works, it can lead to a large number of methods in the view class, making it harder to maintain and understand the code.\n</p>\n<p>\nUsing the action decorator, developers can define a separate function for each action, making the code more organized and easier to understand. Here's an example of how the ReserveAPIView could be refactored using the action decorator:\n</p>\n\n<pre><code class=\"language-python\">class ReserveAPIView(viewsets.ModelViewSet):\n    queryset = Reserve.objects.all()\n    serializer_class = ReserveSerializer\n    permission_classes = [PermissionOne | PermissionTwo]\n\n    @action(detail=True, methods=[&#39;patch&#39;])\n    def approve(self, request, pk=None):\n        instance = self.get_object()\n        # some logic\n        return Response(ReserveSerializer(instance).data)\n\n    @action(detail=True, methods=[&#39;patch&#39;])\n    def reject(self, request, pk=None):\n        instance = self.get_object()\n        # some logic\n        return Response(ReserveSerializer(instance).data)\n</code></pre>\n<p>\nAs shown in the example, the action decorator allows developers to define a separate function for each action, making the code more organized and easier to understand. Additionally, the URLs for each action can be defined in the router, reducing the amount of code in the views and making it easier to maintain.\n</p>"}