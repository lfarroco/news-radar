{"layout":"article.njk","title":"Logging Registration and Login Events with dj-rest-auth","date":"2023-06-22T03:00:00.000Z","formattedDate":"2023-6-22","source_link":"https://old.reddit.com/r/django/comments/14fxdrf/how_to_log_registration_and_login_events_with/","tags":["django"],"topics":[{"name":"Django","slug":"django"}],"content":"<p>Dj-rest-auth is a popular package for handling authentication in Django. However, adding logging functionality to it can be a challenge. In this article, we will explore the simplest method to add success and failure logs for login and registration events, including the user_id.</p>\n<p>First, let&#39;s install the django-structlog package, which provides a structured logging interface for Django. We can then add a custom middleware to our project that logs authentication events using django-structlog. Here&#39;s an example of what the middleware might look like:</p>\n<pre><code class=\"language-python\">import structlog\n\nlogger = structlog.get_logger()\n\nclass AuthLoggingMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        response = self.get_response(request)\n        if request.path == &#39;/auth/login/&#39;:\n            if response.status_code == 200:\n                logger.info(&#39;login.success&#39;, user_id=request.user.id)\n            else:\n                logger.warning(&#39;login.failure&#39;)\n        elif request.path == &#39;/auth/registration/&#39;:\n            if response.status_code == 201:\n                logger.info(&#39;registration.success&#39;, user_id=request.user.id)\n            else:\n                logger.warning(&#39;registration.failure&#39;)\n        return response\n</code></pre>\n<p>We can then add this middleware to our Django settings:</p>\n<pre><code class=\"language-python\">MIDDLEWARE = [\n    # ...\n    &#39;path.to.AuthLoggingMiddleware&#39;,\n]\n</code></pre>\n<p>With this middleware in place, we can now see structured logs for authentication events in our Django logs. This can be incredibly useful for debugging and auditing purposes.</p>\n<p>In conclusion, adding logging functionality to dj-rest-auth can be achieved through the use of django-structlog and a custom middleware. By doing so, developers can easily track and audit authentication events in their Django projects.</p>\n"}