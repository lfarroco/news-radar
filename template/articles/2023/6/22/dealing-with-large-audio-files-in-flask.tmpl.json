{"layout":"article.njk","title":"Dealing with Large Audio Files in Flask","date":"2023-06-22T03:00:00.000Z","formattedDate":"2023-6-22","source_link":"https://old.reddit.com/r/flask/comments/14fw34j/sending_large_audio_file_after_recording_from_web/","tags":["flask","programming-languages"],"topics":[{"name":"Flask","slug":"flask"},{"name":"Programming Languages","slug":"programming-languages"}],"content":"<p>Are you struggling to send large audio files from your web app to Flask? If you&#39;re receiving a &quot;413 (Request Entity Too Large)&quot; error, there are a few things you can try.</p>\n<p>First, make sure you&#39;ve set the Flask app.config[&#39;MAX_CONTENT_LENGTH&#39;] to a high enough value. For example, setting it to 36 * 1024 * 1024 (36mb) should work for most audio files.</p>\n<p>If that doesn&#39;t solve the issue, you can try chunking the audio file into smaller parts before sending it to Flask. Here&#39;s an example of how to do it in JavaScript:</p>\n<pre><code>const CHUNK_SIZE = 16 * 1024; // 16kb chunks\nconst file = document.querySelector(&#39;input[type=&quot;file&quot;]&#39;).files[0];\nlet start = 0;\n\nwhile (start &lt; file.size) {\n  const chunk = file.slice(start, start + CHUNK_SIZE);\n  const formData = new FormData();\n  formData.append(&#39;chunk&#39;, chunk);\n\n  // Send the chunk to Flask using fetch or XMLHttpRequest\n  // ...\n\n  start += CHUNK_SIZE;\n}\n</code></pre>\n<p>On the Flask side, you can receive the chunks and concatenate them into the original file:</p>\n<pre><code>@app.route(&#39;/upload-audio&#39;, methods=[&#39;POST&#39;])\ndef upload_audio():\n  file = request.files[&#39;chunk&#39;]\n  chunk = file.read()\n\n  # Append the chunk to the original file\n  # ...\n\n  return &#39;OK&#39;\n</code></pre>\n<p>By chunking the audio file, you can avoid hitting the MAX_CONTENT_LENGTH limit and ensure that your web app can handle large audio files without any issues.</p>\n"}