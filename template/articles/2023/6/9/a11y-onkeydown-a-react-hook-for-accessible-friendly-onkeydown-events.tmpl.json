{"layout":"article.njk","title":"\"a11y-onkeydown\": A React Hook for Accessible-Friendly onKeyDown Events","date":"2023-06-09T03:00:00.000Z","formattedDate":"2023-6-9","source_link":"https://www.npmjs.com/package/a11y-onkeydown","tags":["react"],"topics":[{"name":"React","slug":"react"}],"content":"<p>When building React applications, it&#39;s important to make them as accessible as possible for all users, including those who rely on keyboard navigation. However, it&#39;s easy to accidentally create &quot;keyboard traps&quot; where a user cannot move focus away from an interactive element or control using the keyboard alone. That&#39;s where the &quot;a11y-onkeydown&quot; package comes in.</p>\n<p>This package provides a simple, reusable hook that allows you to trigger onKeyDown events only when certain keys are pressed, avoiding the need to check the key every time. This is especially useful when working with interactive elements that require keyboard event handlers.</p>\n<p>To use the hook, simply import it from the package and pass it as the value for the onKeyDown attribute of your element. By default, the hook will trigger onKeyDown for any key except for &quot;Shift&quot; and &quot;Tab&quot;, allowing keyboard users to tab up and down the tab stack. Here&#39;s an example:</p>\n<pre><code>import { useKeyDown } from &#39;a11y-onkeydown&#39;;\n\nfunction MyButton({ text, handleSelect }) {\n  return (\n    &lt;div\n      role=&quot;button&quot;\n      tabIndex={0}\n      onClick={handleSelect}\n      onKeyDown={useKeyDown(handleSelect)}\n    &gt;\n      {text}\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<p>In this example, the &quot;handleSelect&quot; function will be called when the user presses any key except for &quot;Shift&quot; and &quot;Tab&quot;. However, you may want to only call onKeyDown if certain keys are pressed. In that case, you can pass an array of strings as the second argument to useKeyDown. For example, if you only want to trigger onKeyDown when the user presses &quot;Enter&quot;, &quot;ArrowUp&quot;, or &quot;ArrowDown&quot;, you can do this:</p>\n<pre><code>import { useKeyDown } from &#39;a11y-onkeydown&#39;;\n\nfunction MyButton({ text, handleSelect }) {\n  return (\n    &lt;div\n      role=&quot;button&quot;\n      tabIndex={0}\n      onClick={handleSelect}\n      onKeyDown={useKeyDown(handleSelect, [&#39;Enter&#39;, &#39;ArrowUp&#39;, &#39;ArrowDown&#39;])}\n    &gt;\n      {text}\n    &lt;/div&gt;\n  );\n}\n</code></pre>\n<p>With this configuration, the &quot;handleSelect&quot; function will only be called when the user presses one of the specified keys.</p>\n<p>In summary, &quot;a11y-onkeydown&quot; is a simple and useful package for making your React applications more accessible to keyboard users. By using this hook, you can avoid creating keyboard traps and provide a better user experience for all.</p>\n"}