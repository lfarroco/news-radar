{"layout":"article.njk","title":"Bebop introduces JSON-Over-Bebop for fast runtime type validation of raw JSON in Typescript","date":"2023-06-27T03:00:00.000Z","formattedDate":"2023-6-27","source_link":"https://old.reddit.com/r/typescript/comments/14k95jv/bebop_introduces_jsonoverbebop_for_fast_runtime/","tags":["typescript"],"topics":[{"name":"TypeScript","slug":"typescript"}],"content":"<p>Bebop, a Typescript library, has introduced JSON-Over-Bebop for fast runtime type validation of raw JSON. This library is faster than Zod and other alternatives. The library is available on GitHub and can be downloaded from the <a href=\"https://github.com/betwixt-labs/bebop/releases/tag/v2.8.0\">link</a>.</p>\n<p>JSON-Over-Bebop is a library that allows developers to validate the types of JSON data at runtime. This is useful when dealing with untrusted data sources, such as APIs. The library is designed to be fast and efficient, making it a good choice for high-performance applications.</p>\n<p>To use JSON-Over-Bebop, developers define the types of their JSON data using a simple schema language. The library then generates TypeScript interfaces for these types, which can be used to validate the data at runtime. The library also provides a number of utility functions for working with JSON data, such as parsing and serializing.</p>\n<p>Here is an example of how to use JSON-Over-Bebop to validate a JSON object:</p>\n<pre><code class=\"language-typescript\">import { validate } from &#39;json-over-bebop&#39;;\n\nconst schema = {\n  type: &#39;object&#39;,\n  properties: {\n    name: { type: &#39;string&#39; },\n    age: { type: &#39;number&#39; },\n  },\n  required: [&#39;name&#39;, &#39;age&#39;],\n};\n\nconst data = {\n  name: &#39;John&#39;,\n  age: 30,\n};\n\nconst result = validate(schema, data);\n\nif (result.valid) {\n  console.log(&#39;Data is valid!&#39;);\n} else {\n  console.error(&#39;Data is invalid:&#39;, result.errors);\n}\n</code></pre>\n<p>Overall, JSON-Over-Bebop is a useful library for developers who need to validate JSON data at runtime. Its speed and efficiency make it a good choice for high-performance applications.</p>\n"}