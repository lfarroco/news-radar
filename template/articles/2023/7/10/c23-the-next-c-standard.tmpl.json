{"layout":"article.njk","title":"C++23: The Next C++ Standard","date":"2023-07-10T03:00:00.000Z","formattedDate":"2023-7-10","source_link":"https://www.modernescpp.com/index.php/c-23-the-next-c-standard","tags":["c"],"topics":[{"name":"C++","slug":"c"}],"content":"<p>C++23 will be the next C++ standard after C++20. While it may not be as game-changing as previous standards like C++98, C++11, or C++20, it still brings significant improvements to the language. To understand the evolution of C++, it&#39;s important to look at the historical context of the C++ standards.</p>\n<p>C++98, based on the Annotated C++ Reference Manual (ARM), defined the functionality of C++ and introduced essential features such as templates, the standard template library (STL), strings, and IO streams. C++03 made minor technical corrections, while TR1, published in 2005, laid the groundwork for Modern C++ with libraries like regular expressions, smart pointers, and hashtables.</p>\n<p>C++11, also known as Modern C++, introduced major changes like move semantics, perfect forwarding, variadic templates, and a memory model for threading. C++14 brought smaller enhancements like read-writer locks and generalized lambdas, while C++17 introduced the parallel STL and standardized filesystem.</p>\n<p>As for C++23, developers can expect further improvements and refinements to the language. While specific features are yet to be finalized, it is anticipated that C++23 will continue to build upon the foundation set by previous standards, making it easier and more efficient for developers to write robust and maintainable code.</p>\n<p>To stay up to date with the latest news and developments in the C++ community, developers can participate in mentoring programs and subscribe to newsletters like &quot;Dev Radar&quot; that provide valuable insights and resources for mastering the language.</p>\n"}