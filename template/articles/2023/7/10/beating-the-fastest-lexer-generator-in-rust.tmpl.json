{"layout":"article.njk","title":"Beating the fastest lexer generator in Rust","date":"2023-07-10T03:00:00.000Z","formattedDate":"2023-7-10","source_link":"https://alic.dev/blog/fast-lexing","tags":["rust"],"topics":[{"name":"Rust","slug":"rust"}],"content":"<p>The article shows the author&#39;s doubts about the efficiency and generality of lexer generators. The author decides to implement their own lexer to compare it with the performance of existing lexer generators. The hand-rolled implementation uses state transitions and terminal states to identify tokens. The author also mentions the use of a perfect hash function for keyword matching. The comparison between the author&#39;s implementation and the lexer generator &quot;logos&quot; shows that &quot;logos&quot; performs significantly better, especially on x86_64 systems. The author speculates that this performance difference is due to differences in speculative execution architecture. The article provides insights into the performance considerations of lexers and the impact of different implementations.</p>\n"}