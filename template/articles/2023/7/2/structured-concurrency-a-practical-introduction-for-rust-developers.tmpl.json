{"layout":"article.njk","title":"Structured Concurrency: A Practical Introduction for Rust Developers","date":"2023-07-02T03:00:00.000Z","formattedDate":"2023-7-2","source_link":"https://blog.yoshuawuyts.com/tree-structured-concurrency/","tags":["rust","concurrency","algorithms","data-structures"],"topics":[{"name":"Rust","slug":"rust"},{"name":"concurrency","slug":"concurrency"},{"name":"algorithms","slug":"algorithms"},{"name":"data structures","slug":"data-structures"}],"content":"<p>Structured concurrency is a concept that applies to concurrent control-flow primitives in programming languages, including Rust. In this article, Yoshua Wuyts provides a practical introduction to structured concurrency and explains its relevance in Rust development.</p>\n<p>The author starts by acknowledging the challenge of explaining structured concurrency and its relation to structured programming. Instead of diving deep into theoretical concepts, the article focuses on providing developers with a practical understanding of structured concurrency and how they can apply it to their Rust projects.</p>\n<p>To fully grasp the concepts discussed in this article, the author assumes some familiarity with async Rust and async cancellation. However, for those interested in structured programming, the author recommends reading Dijkstra&#39;s writings on the subject.</p>\n<p>Structured concurrency is a property of a program that ensures the proper handling of concurrent control flow. It helps developers reason about async Rust and provides a lens through which to analyze and optimize their code.</p>\n<p>To illustrate the practical application of structured concurrency, the article could include code snippets showcasing how to implement structured concurrency in Rust projects. This would enable developers to understand and utilize structured concurrency in their own code.</p>\n<p>Overall, this article serves as a valuable resource for Rust developers looking to enhance their understanding of structured concurrency and leverage it in their projects. By providing a practical introduction and highlighting its relevance, the author empowers developers to apply structured concurrency principles to their Rust codebase, ultimately improving the efficiency and reliability of their concurrent programs.</p>\n"}