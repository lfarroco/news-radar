{"layout":"article.njk","title":"High Throughput FizzBuzz Implementation","date":"2023-07-03T03:00:00.000Z","formattedDate":"2023-7-3","source_link":"https://codegolf.stackexchange.com/questions/215216/high-throughput-fizz-buzz/236630#236630","tags":["algorithms","data-structures"],"topics":[{"name":"Algorithms","slug":"algorithms"},{"name":"Data Structures","slug":"data-structures"}],"content":"<p>The article discusses the challenge of implementing a high throughput FizzBuzz program. FizzBuzz is a common coding challenge where a program prints numbers from 1 to n, replacing numbers divisible by 3 with &quot;Fizz&quot; and numbers divisible by 5 with &quot;Buzz&quot;. If a number is divisible by both 3 and 5, it is replaced with &quot;FizzBuzz&quot;. The goal is to create an implementation that can handle large numbers as fast as possible.</p>\n<p>The author presents a naive implementation in C that achieves a throughput of about 170MiB/s on an average machine. However, the article highlights that there is room for improvement and introduces the concept of measuring throughput using the <code>pv</code> command.</p>\n<p>Developers are encouraged to write their own FizzBuzz program and measure its throughput using the <code>&lt;your_program&gt; | pv &gt; /dev/null</code> command. The higher the throughput, the better the implementation.</p>\n<p>To help developers optimize their FizzBuzz program, the article suggests exploring different programming languages, algorithms, and optimizations. It also mentions that the FizzBuzz challenge can be extended to handle larger numbers or even infinite sequences.</p>\n<p>Overall, the article serves as a starting point for developers looking to improve their FizzBuzz implementation and achieve high throughput. It emphasizes the importance of performance optimization and encourages experimentation with different approaches.</p>\n"}