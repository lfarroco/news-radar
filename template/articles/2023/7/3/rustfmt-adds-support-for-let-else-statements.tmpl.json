{"layout":"article.njk","title":"Rustfmt adds support for let-else statements","date":"2023-07-03T03:00:00.000Z","formattedDate":"2023-7-3","source_link":"https://blog.rust-lang.org/2023/07/01/rustfmt-supports-let-else-statements.html","tags":["rust"],"topics":[{"name":"Rust","slug":"rust"}],"content":"<p>Rustfmt, the Rust code formatter, will soon include support for formatting let-else statements. This feature will be available starting with the nightly 2023-07-02 toolchain and is expected to be part of the stable Rust 1.72 release.</p>\n<p>Let-else statements were introduced in Rust 1.65.0, but until now, Rustfmt did not have formatting support for them. As a result, developers had to manually style these statements. With the upcoming update, Rustfmt will automatically apply the let-else formatting rules.</p>\n<p>The addition of let-else formatting support addresses a long-standing request from the Rust community. The Rust project has implemented measures to ensure that formatting support is provided more promptly after feature stabilization.</p>\n<p>For developers using Rust, this update will streamline their coding process and maintain consistent formatting across their projects. Here&#39;s an example of how a let-else statement will be formatted by Rustfmt:</p>\n<pre><code class=\"language-rust\">let result = if condition {\n    // code block for if branch\n    ...\n} else {\n    // code block for else branch\n    ...\n};\n</code></pre>\n<p>This improvement aligns with Rust&#39;s commitment to providing a clean and readable codebase. Developers can refer to the official Rust Style Guide for more information on the default formatting style for Rust code.</p>\n"}