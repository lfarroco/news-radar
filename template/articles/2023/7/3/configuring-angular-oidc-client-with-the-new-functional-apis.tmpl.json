{"layout":"article.njk","title":"Configuring angular-oidc-client with the new functional APIs","date":"2023-07-03T03:00:00.000Z","formattedDate":"2023-7-3","source_link":"https://timdeschryver.dev/blog/configuring-angular-oidc-client-with-the-new-functional-apis","tags":["angular","angular-oidc-client"],"topics":[{"name":"Angular","slug":"angular"},{"name":"angular-oidc-client","slug":"angular-oidc-client"}],"content":"<p>The latest versions of Angular have introduced new functional APIs for configuring applications. These APIs include functional guards, new APIs for the HTTP client, and standalone components like EnvironmentProviders. With these new APIs, developers have more flexibility in configuring their Angular applications.</p>\n<p>In line with these updates, the latest version of angular-auth-oidc-client (v16.0.0) has also been released. This version includes new functionality to support the new Angular APIs. In this article, Tim Deschryver explains how to configure angular-oidc-client using the new functional APIs.</p>\n<p>To start, instead of using the AuthModule, developers can now use the <code>provideAuth</code> method to configure the authentication flow. This method takes the same configuration options as the AuthModule&#39;s config object.</p>\n<p>Additionally, to add the user&#39;s access token to HTTP requests, developers can now use the <code>authInterceptor</code> function. Previously, they had to use the <code>HTTP_INTERCEPTORS</code> injection token to register the <code>AuthInterceptor</code> class provided by the library. Using <code>authInterceptor</code> simplifies the process.</p>\n<p>For more details and code examples, refer to the original blog post by Tim Deschryver.</p>\n"}