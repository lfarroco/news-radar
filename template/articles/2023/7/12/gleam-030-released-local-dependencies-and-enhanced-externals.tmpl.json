{"layout":"article.njk","title":"Gleam 0.30 released: Local dependencies and enhanced externals","date":"2023-07-12T03:00:00.000Z","formattedDate":"2023-7-12","source_link":"https://gleam.run/news/v0.30-local-dependencies-and-enhanced-externals/","tags":["elixir"],"topics":[{"name":"Elixir","slug":"elixir"}],"content":"<p>Gleam, a type-safe and scalable language for the Erlang virtual machine and JavaScript runtimes, has just released version 0.30.0. This update brings exciting new features that developers will find useful.</p>\n<p>One of the notable additions is support for local dependencies. Previously, Gleam&#39;s build tool only supported Hex, the package repository for the Erlang ecosystem. With this update, developers can now depend on other Gleam projects without pushing them to the repository. This feature is especially helpful when testing projects, working on related packages, or enforcing a specific dependency structure.</p>\n<p>Another improvement in Gleam 0.30.0 is the enhanced externals feature. Gleam can import and call functions written in other languages on the runtime, such as Erlang, Elixir, JavaScript, and TypeScript. However, the previous syntax for defining these functions was verbose and repetitive. Now, with the redesigned FFI, developers can define these functions more concisely and keep the various targets in sync.</p>\n<p>Additionally, Gleam now includes the &quot;todo&quot; and &quot;panic&quot; keywords, which can be used to crash the program when unfinished or unreachable code is reached. Developers can provide custom messages for these crashes, making it easier to identify and address issues during development.</p>\n<p>With these updates, Gleam continues to provide developers with a powerful and efficient language for building robust applications on the Erlang virtual machine and JavaScript runtimes. To learn more about Gleam and its latest features, visit the Gleam package index website.</p>\n<pre><code class=\"language-gleam\">// Example code using local dependencies and enhanced externals\nimport gleam/other_package\n\npub fn main() {\n  let result = other_package.someFunction()\n  // ...\n}\n</code></pre>\n<p>Stay tuned for more news and updates from the programming language and framework world on Dev Radar!</p>\n"}