{"layout":"article.njk","title":"Implementing Rails-like Controllers in a No-Rails App","date":"2023-07-12T03:00:00.000Z","formattedDate":"2023-7-12","source_link":"https://www.akshaykhot.com/implement-rails-controllers-in-ruby/","tags":["ruby"],"topics":[{"name":"Ruby","slug":"ruby"}],"content":"<p>In this article, the author demonstrates how to implement a simplified version of the controller pattern in a Ruby web application without using Rails. The controller class in Rails acts as a coordinator, handling incoming HTTP requests and preparing data for the view using domain models. By understanding this pattern, developers can gain a better appreciation for Rails controllers.</p>\n<p>The article starts by recapping the progress made in the previous articles, highlighting the need for a more organized approach to handling routes. To achieve this, the author introduces the concept of controller classes, which can handle specific types of requests, such as creating, displaying, updating, and deleting articles.</p>\n<p>To illustrate the implementation of the controller pattern, the author provides an example controller class and an action method. They also explain how to define a route that maps to the controller action. For example, navigating to the &quot;articles/index&quot; URL will call the &quot;index&quot; method in the &quot;ArticlesController&quot; class.</p>\n<p>The article then moves on to the implementation steps. The first step is to update the router to recognize and parse the &quot;controller#action&quot; route syntax. The necessary changes to the &quot;router.rb&quot; file are provided, including requiring the controller file and updating the &quot;get&quot; method.</p>\n<p>Overall, this article serves as a valuable resource for developers who want to understand and implement Rails-like controllers in non-Rails applications. By following the steps outlined in the article, developers can create a more organized and maintainable codebase.</p>\n"}