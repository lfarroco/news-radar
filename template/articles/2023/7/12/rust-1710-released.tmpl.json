{"layout":"article.njk","title":"Rust 1.71.0 released","date":"2023-07-12T03:00:00.000Z","formattedDate":"2023-7-12","source_link":"https://blog.rust-lang.org/2023/07/13/Rust-1.71.0.html","tags":["rust"],"topics":[{"name":"Rust","slug":"rust"}],"content":"<p>The Rust team is thrilled to announce the release of Rust 1.71.0. Rust is a programming language that empowers developers to build reliable and efficient software. This latest version brings several new features and improvements.</p>\n<p>To update to Rust 1.71.0, you can use rustup if you already have a previous version installed. If not, you can get rustup from the official website. Make sure to check out the detailed release notes on GitHub for more information.</p>\n<p>One notable addition in Rust 1.71.0 is the stabilization of C-unwind ABI variants. This feature allows safe unwinding operations (such as panic or C++ style exceptions) to cross the ABI boundary without terminating the process. Users are encouraged to start using the new unwind ABI variants in their code to remain future-proof.</p>\n<p>Another exciting enhancement is the support for debugger visualization attributes. With the #[debug_visualizer(natvis_file = &quot;...&quot;)] and #[debug_visualizer(gdb_script_file = &quot;...&quot;)] attributes, developers can embed Natvis descriptions and GDB scripts into Rust libraries. This improves the debugger output when inspecting data structures created by those libraries.</p>\n<p>Furthermore, Rust now supports raw-dylib linking on Windows platforms. This means that functions from dynamic libraries can be used without requiring those libraries to be available at build time. Developers no longer need to install those libraries or ship stub versions of libraries in crates to link against. Additionally, Rust supports binding to symbols provided by DLLs by ordinal using the #[link_ordinal] attribute.</p>\n<p>Rust 1.71.0 brings these exciting features and more, making it easier for developers to build robust and efficient software. Stay tuned for future updates and keep exploring the Rust ecosystem to leverage the full potential of this powerful programming language.</p>\n"}