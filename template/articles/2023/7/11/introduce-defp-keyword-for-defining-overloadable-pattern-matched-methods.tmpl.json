{"layout":"article.njk","title":"Introduce defp keyword for defining overloadable, pattern matched methods","date":"2023-07-11T03:00:00.000Z","formattedDate":"2023-7-11","source_link":"https://bugs.ruby-lang.org/issues/19764","tags":["ruby"],"topics":[{"name":"Ruby","slug":"ruby"}],"content":"<p>Ruby developer Zeke Gabrielse proposes the introduction of a new keyword, defp, in Ruby to define methods that apply pattern matching to their arguments. This feature aims to improve code quality and make the developer&#39;s intent clearer by refactoring complex methods that use case statements for handling varied arguments.</p>\n<p>The proposed defp keyword would allow developers to define smaller, simpler methods that handle specific argument patterns, bringing method overloads to Ruby. Additionally, this feature adds a way to define more typing to the language, similar to what RBS has attempted but in a more Ruby-like way.</p>\n<p>The idea of automatic dispatching without boilerplate code is appealing, although method overloading has never existed in Ruby. Pattern matching in the method signature, on the other hand, is highly desired by developers.</p>\n<p>Zeke&#39;s proposal has sparked further discussion within the Ruby community, with many expressing their support for the introduction of the defp keyword.</p>\n<p>Original idea by Victor Shepelev: <a href=\"https://zverok.space/blog/2023-05-05-ruby-types.html\">Read more</a></p>\n<p>Further discussion: <a href=\"https://news.ycombinator.com/item?id=35834351\">Read more</a></p>\n<pre><code class=\"language-ruby\">def foo(nb =&gt; Integer) # class validation\ndef foo(minutes =&gt; 0..59) # range/structure validation\ndef foo(if: =&gt; condition) # alias for keyword argument (#18402)\ndef foo(v =&gt; @hostname) # easy way to set instance variables (#15192 and many others)\n</code></pre>\n<p>The Ruby community eagerly awaits the implementation of this proposed feature, as it has the potential to significantly enhance the language&#39;s expressiveness and code maintainability.</p>\n"}