{"layout":"article.njk","title":"Constrain your user-defined conversions","date":"2023-07-07T03:00:00.000Z","formattedDate":"2023-7-7","source_link":"https://www.foonathan.net/2023/07/constrain-user-defined-conversions/#content","tags":["c"],"topics":[{"name":"C++","slug":"c"}],"content":"<p>In this article, the author discusses the importance of constraining user-defined conversions in C++. They start by explaining how implicit conversions can be added to types using conversion operators, using the example of std::string being implicitly convertible to std::string_view. However, the author highlights that even when all criteria for implicit conversions are fulfilled, the conversion can still be dangerous. They then introduce the concept of user-defined conversion sequences and explain how the second standard conversion sequence can be problematic. To address this issue, the author proposes using templated conversion operators and constraining the template parameter to prevent additional implicit conversions. They provide code examples to illustrate the suggested guideline. This article is a must-read for C++ developers who want to ensure safe and controlled user-defined conversions in their code.</p>\n"}