{"layout":"article.njk","title":"Shifting to Standalone Components in Angular","date":"2023-05-22T03:00:00.000Z","formattedDate":"2023-5-22","source_link":"https://blog.bitsrc.io/how-ive-shifted-my-angular-app-to-standalone-components-approach-48c344bb714a","tags":["angular"],"topics":[{"name":"Angular","slug":"angular"}],"content":"<p>Angular is a popular framework for building web applications, and developers are always looking for ways to simplify their code and reduce bundle size. One approach that has gained traction in recent years is the use of standalone components.</p>\n<p>Standalone components were introduced as an experimental feature in Angular v14 and have since become a game changer for Angular-based applications. By removing unnecessary imports, standalone components simplify code and reduce bundle size.</p>\n<p>The traditional approach to declaring components in Angular involves using ngModules. However, with standalone components, you no longer have to declare components in any module as long as a standalone flag is applied. Here&#39;s an example of how to declare a standalone component:</p>\n<pre><code class=\"language-typescript\">import { Component } from &#39;@angular/core&#39;;\n\n@Component({\n  selector: &#39;app-my-standalone-component&#39;,\n  template: `\n    &lt;h1&gt;Hello, world!&lt;/h1&gt;\n  `,\n  standalone: true\n})\nexport class MyStandaloneComponent {}\n</code></pre>\n<p>Compared to the component declaration in the ngModule-based approach, you&#39;ll notice that the imports array is available for standalone components. This means you can import other standalone components and modules if you need them. However, the biggest advantage of standalone components is that you don&#39;t have to import the entire CommonModule. Instead, you can import only those functionalities required in your component, which significantly impacts your bundle size.</p>\n<p>While standalone components were introduced as an experimental feature, they have become a recommended approach for Angular development. In fact, the Angular team has stated that they will be removing support for the traditional ngModule-based approach in future versions of Angular.</p>\n<p>If you&#39;re looking to shift to standalone components in your Angular app, there are a few things to keep in mind. First, you&#39;ll need to ensure that your app is using Angular v14 or later. Second, you&#39;ll need to update your component declarations to include the standalone flag. Finally, you&#39;ll need to refactor your code to remove unnecessary imports and take advantage of the reduced bundle size.</p>\n<p>In conclusion, standalone components are a powerful tool for simplifying code and reducing bundle size in Angular-based applications. As the Angular team continues to promote this approach, developers should consider shifting their apps to standalone components to stay up-to-date with the latest best practices in Angular development.</p>\n"}