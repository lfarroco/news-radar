{"layout":"article.njk","title":"GHCJS: Bringing Haskell to the Front-end","date":"2022-12-13T03:00:00.000Z","formattedDate":"2022-12-13","source_link":"https://engineering.iog.io/2022-12-13-ghc-js-backend-merged/","tags":["haskell","javascript"],"topics":[{"name":"Haskell","slug":"haskell"},{"name":"JavaScript","slug":"javascript"}],"content":"<p>The GHC DevX team at IOG has merged a new JavaScript backend into GHC, enabling Haskell for both front-end and back-end web applications. This means that the next release of GHC will be able to emit code that runs in web browsers without requiring any extra tools.</p>\n<p>In a recent post, the team describes the challenges they faced bringing GHCJS to GHC, how they overcame those challenges, and what&#39;s left to do. They also provide links to skip ahead to the future of GHCJS, product roadmap, how to help, and build instructions.</p>\n<p>JavaScript was chosen as the target language due to its dominance in the client-side programming market share, with 97.3% at the time of writing. The team believes that JavaScript is not going to disappear anytime soon and will become more entrenched as more interactivity is pushed onto the internet.</p>\n<p>With this new development, Haskell developers can now write front-end web applications using the same language they use for back-end development. This reduces the need for developers to learn multiple languages, making it easier to maintain and scale web applications.</p>\n<p>Here&#39;s an example of how to write a simple &quot;Hello, World!&quot; program in Haskell using the new GHCJS backend:</p>\n<pre><code class=\"language-haskell\">import JavaScript.Web.Canvas\n\nmain = do\n  Just canvas &lt;- getElementById &quot;canvas&quot;\n  withContext canvas $ do\n    fillText &quot;Hello, World!&quot; 10 50\n</code></pre>\n<p>The team is still working on improving the performance of the generated JavaScript code and making it more compatible with existing JavaScript libraries. However, this is a major step forward for the Haskell community, and we can expect to see more web applications written in Haskell in the future.</p>\n"}